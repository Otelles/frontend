# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface VideoMutationError {
    message: String!
}

type Bulletin {
    createdAt: DateTime!
    id: ID!
    text: String!
    title: String!
    updatedAt: DateTime!
}

type BulletinPagination {
    items: [Bulletin!]!
    pageInfo: PaginationInfo!
}

type Mutation {
    bulletin(bulletin: BulletinInput!): Bulletin!
    login(email: String!, password: String!): User
    logout: Boolean
    organization(organization: OrganizationInput!): Organization!
    video: VideoMutations
}

type Organization {
    brregId: Int
    createdAt: DateTime
    description: String
    editor: OrganizationEditor!
    homepage: String
    id: ID!
    latestVideos: [Video!]
    name: String!
    postalAddress: String!
    streetAddress: String!
    updatedAt: DateTime
}

type OrganizationEditor {
    email: String!
    id: ID!
    name: String!
}

type PaginationInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    page: Int!
    perPage: Int!
    totalItems: Int!
    totalPages: Int!
}

type Query {
    bulletin(id: ID!): Bulletin!
    bulletins(page: Int! = 1, perPage: Int! = 20): BulletinPagination!
    organization(id: ID!): Organization!
    schedule(filter: ScheduleFilter!, page: Int! = 1, perPage: Int! = 20): SchedulePagination!
    session: Session!
    video(id: ID!): Video!
    videos(filter: VideoFilter, page: Int! = 1, perPage: Int! = 20, sort: [VideoSort!]): VideoPagination!
}

type ScheduleItem {
    endsAt: DateTime!
    id: ID!
    startsAt: DateTime!
    video: Video!
}

type SchedulePagination {
    items: [ScheduleItem!]!
    pageInfo: PaginationInfo!
}

type Session {
    authenticated: Boolean!
    user: User
}

type User {
    email: String!
    firstName: String
    id: ID!
    lastName: String
    roles: [UserRole!]!
}

type UserRole {
    organization: Organization!
    role: RoleType!
}

type Video {
    assets: [VideoAsset!]!
    createdAt: DateTime!
    description: String!
    id: ID!
    images: VideoImages!
    organization: Organization!
    title: String!
    updatedAt: DateTime!
    viewCount: Int
}

type VideoAsset {
    id: ID!
    path: String!
    type: String!
}

type VideoImages {
    thumbLarge: String!
    thumbMedium: String!
    thumbSmall: String!
}

type VideoMutationPayload {
    error: VideoMutationError
    status: MutationStatus!
    video: Video
    videoId: ID
}

type VideoMutations {
    create(input: VideoInput!): VideoMutationPayload!
    delete(videoId: ID!): VideoMutationPayload!
    publish(videoId: ID!): VideoMutationPayload!
    unpublish(videoId: ID!): VideoMutationPayload!
    update(input: VideoInput!): VideoMutationPayload!
}

type VideoPagination {
    items: [Video]!
    pageInfo: PaginationInfo!
}

enum MutationStatus {
    ERROR
    SUCCESS
}

enum RoleType {
    EDITOR
    MEMBER
}

enum VideoSort {
    DATE_ASC
    DATE_DESC
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

input BulletinInput {
    id: ID
    text: String
    title: String
}

input OrganizationInput {
    brregId: String
    description: String
    homepage: String
    id: ID
    name: String
    postalAddress: String
    streetAddress: String
}

input ScheduleFilter {
    from: DateTime
    to: DateTime
}

input VideoFilter {
    organizationId: ID
    query: String
}

input VideoInput {
    description: String
    id: ID
    mediaId: ID
    organizationId: ID
    title: String
}
